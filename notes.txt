React Native Components
-just react Components, features like state, props, jsx is all the same
-native components used instead of web components in building the view
-maps js code to obj-c or java code when rendering on phone

React Native Elements
-All in one UI kit for creating apps in react native
-several useful UI components
-useful in designing UI for your app
install: yarn add react-native-elements

React Native Navigation
-need to navigate between screens and views
-react uses react router dom
-views get added to a stack and you can navigate back by popping the last view from the stack
-tab navigation works similiarly
-extensible and easy to use navigation solution
-built in navigators: stack, drawer, tab, switch, or custom
-install yarn add react-navigation
-Root Page -> becomes bottom stack in views
-Child Page -> added to top of stack
-grandchild page -> added to top of stack
stack:
grandchild page
child page
root page
-when you use back button, top most view is popped from the stack and previous screen is back in view
-provides support for transition between screens
-manages navigation history
-provides gestures and animations when navigating between routes in the stack
-enables you to go back
Other navigators
Drawer Navigation
-provides automatic construction of the side drawer with navigation options
-can customize the drawer
Tab Navigation
-typical bottom tab navigation support
-a lot of dditional fetures to support custom navigators


Redux Overview
Actions go through dispatcher which changes store which changes store
all changes go through dispatcher
Main Principles
Single Source of truth
-single state object tree within a single store
State is read only (no getters no setters)
-Changes should only be done through Actions
Changes are made through pure functions aka reducers
-take previos state and action and return next state
-no mutatino of previous state, create whole new state
Reducer recieves actions from dispatch
reducer functions result in new state
state changes reflected to views
uni directional data flow

Redux Thunk
middleware that allows you to write action creators that return a function instead of an action
-can be used to delay the dispatch of an action
-can be used to dispatch only if certain conditions met
Inner function receives the dispatch() and getState() store methods

Fetch
xmlhttprequest is outdated
fetch api is modern replacement for requests
provides interface for fetching resources
powerful, flexible, promise based

Debugging
debug remootely with react-debug
React Native Activity Indicator
create loading components
isloading function available

Forms and Modals
Forms diff in mobile apps
Modal: overlay on top of screen
changes in elements reflected in state of current component
data entry through form like elements are facilitated in react native
textinput component allows you to type text in your app
-attributes like securetextentry for handling password fields
event binding like onchange text on change, onfocus, on blur etc
input from react native elements allows for icons to the left and right of the fields

Form Widgets
switch
slider
picker (from list)
Rating, checkbox, slider, datepicker, etc available

Modal
display overed current page
opened and presented from another component
needs to maintain state in host component about visibilty of Modal

Synthesize forms using UI Widgets

Animations to the application
better user experience
supports powerful Animated api
-fluid, powerful, easy
-declarative relationships between inputs and outputs with configurable transforms in betweem
-simple start.stop methods to control time based animation execution
interpolate function: take range and map to output range
const xpost1: map input to output, map into transform vairable and use translateX x coordindate to values provided
Values in Animated-Animated.value()
animated.ValueXY: vector
Interpolate map input ranges to diff output ranges
Types
Animated.decay: fast starts and slows to stop
Animated.spring: spring physics model
Animated.timing: animate valoues over time using easing functions

Animated Components
Image
ScrollView
text
view

Control size of view, zoom, animate text etc
Can compose animations: delay parallel, sequence, stagger

React-native-animatable
-takes animated api and packages into standard easy to use animations and declarative transitions
-declaratibve precomopsed animations east to apply to text, view, Image
-sev props: animation, duration, delay direction, easing iterationCount, transition
imperative use
animations exposed as functions on aimtable elements
get reference to an elements
apply animatino functions
take duration argument
returns a promse that ios resolved when animatino complese successfuy or cancelled

Animated API 
transform props as function of time
Home Component, import Animated and Easing from react-native
rendering three parts in app
replace scrollview with Animations
Home Component
need to add constructor to store value in state for this app
this.animatedValue = new Animated.Value(0) type used by api (object of type animat4ed value)
inside Home compnent, in componentDidMount > call method this.animate();
animate method > take animatedValue and this.animatedValue .setvalue(0); then Animated.timing 
timing method from API, enables us to take value to change as function of time
this.animatedValue, Animated.TimingAnimgationConfig > toValue: 8, duration is 8000 aka 8 seconds, easing > (how do you change this value, linear, slowly? etc)
.start() starts the animation
we can use this value to control certain properties
Interpolation supported: define constant xpos1 = this.animatedValue.interpolate() meaning as value chagnes map value to a corresponding different value (inputRange: [0, 1, 3, 5], outputRange: [1200, 600, 0, -600, -1200] if input is 0 then outputs 1200 etc
way of controlling the exposition for an item, so on second 0, this change applied is in the output list

React Native animatable
yarn install reactnativeanimatable...
<animatable.view animation="preset animation" duration={how long} delay={time delayed}>

